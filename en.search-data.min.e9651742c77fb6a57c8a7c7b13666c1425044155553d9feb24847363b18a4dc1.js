'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-linux/docs/distro/CentOS/','title':"CentOS",'content':"CentOS yum Yum（Yellow dog Updater, Modified）是由 Duke University 团队修改 Yellow Dog Linux 的 Yellow Dog Updater 开发而成，是一个基于 RPM 包管理的字符前端软件包管理器。能够从指定的服务器自动下载 RPM 包并且安装，可以处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。被 Yellow Dog Linux 本身，以及 Fedora、Red Hat Enterprise Linux 采用。\n安装本地 rpm 包 rpm -qs | grep jdk yum install -y /xxx/xxx.rpm # localinstall 已过时 # yum localinstall -y /xxx/xxx.rpm 第三方源 EPEL Extra Packages for Enterprise Linux\nEPEL is a Fedora Special Interest Group that creates, maintains, and manages a high quality set of additional packages for Enterprise Linux, including, but not limited to, Red Hat Enterprise Linux (RHEL), CentOS and Scientific Linux (SL), Oracle Linux (OL).\nyum install -y epel-release "});index.add({'id':1,'href':'/study-linux/docs/shell/command/ps/','title':"ps",'content':"ps "});index.add({'id':2,'href':'/study-linux/docs/shell/type/sh/','title':"sh",'content':"sh 标记为 #!/bin/sh 的脚本不应使用任何 POSIX 没有规定的特性 (如 let 等命令，但 #!/bin/bash 可以)。\n"});index.add({'id':3,'href':'/study-linux/docs/shell/program/practice/snippet/','title':"代码片段",'content':"代码片段 锁文件  [建议] 使用 pid 生成锁文件，并用 set -C 来做逻辑判断  lockfile=/tmp/mylock if (set -C;echo $$ \u0026gt;$lockfile) 2\u0026gt;/dev/null; then # set -C 使已存在的文件不能再被写 # echo 不旦生成了锁文件，而且还将pid放入其中 # 当此lock文件存在时，if返回失败，跳到else trap 'rm $lockfile; exit $?' INT TERM EXIT # trap保证了脚本异常中断时，释放锁文件（删） { my critical code... # 此处是正式的脚本代码 my critical code... my critical code... } rm $lockfile # 正式代码运行完了，释放锁文件 trap - INT TERM EXIT # 恢复trap的设置（如在脚本最后时，非必要恢复） exit 0 else # 锁文件生效，会跳到此处 echo \u0026quot;$lockfile exist, pid $(\u0026lt;$lockfile) is running.\u0026quot; # 打印错误信息 exit 1 fi "});index.add({'id':4,'href':'/study-linux/docs/appendix/tutorial/','title':"教程",'content':"教程 基础 进阶 高阶 "});index.add({'id':5,'href':'/study-linux/docs/shell/program/practice/spec/baidu/','title':"百度 Shell 编程规范",'content':"  本文档适用于 Bash 3.0 及以上版本，不包括 4.0 新增特性\n  文档是 Bash 编程规范，不是 POSIX Shell 编程规范\n  章节分类和内容组织依据 Google Shell Style Guide\n  参考文档\n Google Shell Style Guide Chromium Project Shell Style Guidelines     "});index.add({'id':6,'href':'/study-linux/docs/shell/program/practice/spec/','title':"编程规范",'content':"编程规范 "});index.add({'id':7,'href':'/study-linux/docs/shell/type/bash/','title':"Bash",'content':"Bash "});index.add({'id':8,'href':'/study-linux/docs/distro/Ubuntu/','title':"Ubuntu",'content':"CentOS "});index.add({'id':9,'href':'/study-linux/docs/appendix/interview/basic/','title':"基础",'content':"基础面试题 "});index.add({'id':10,'href':'/study-linux/docs/appendix/interview/advanced/','title':"进阶",'content':"进阶面试题 "});index.add({'id':11,'href':'/study-linux/docs/appendix/interview/','title':"面试题",'content':"Linux 面试题 基础题 进阶题 高阶题 "});index.add({'id':12,'href':'/study-linux/docs/shell/command/kill/','title':"kill",'content':"kill kill -9 与 kill 的区别  kill 等于 kill -15，是安全的  TERM   kill -9 是不安全的  SIGKILL    kill aka kill -TERM aka kill -15 is the safe and correct way of terminating a process. It\u0026rsquo;s equivalent to safely shutting down a computer.\nkill -9 is the unsafe way of brutally murdering a process. It\u0026rsquo;s equivalent to pulling the power cord, and may cause data corruption.\n参考：\n what-is-the-difference-between-kill-and-kill-9 what-is-the-purpose-of-the-9-option-in-the-kill-command Linux kill -9 和 kill -15 的区别  "});index.add({'id':13,'href':'/study-linux/docs/shell/command/netcat/','title':"netcat",'content':"netcat netcat -u 127.0.0.1 9502 "});index.add({'id':14,'href':'/study-linux/docs/shell/command/netstat/','title':"netstat",'content':"netstat "});index.add({'id':15,'href':'/study-linux/docs/shell/command/telnet/','title':"telnet",'content':"telnet 只能测试 tcp 端口连接\n无法测试 udp 端口连接（可以用 netcat）\ntelnet domain/ip [port] telnet 退出  按 CTRL+] 然后输入 quit  "});index.add({'id':16,'href':'/study-linux/docs/appendix/interview/expert/','title':"高阶",'content':"高阶面试题 "});index.add({'id':17,'href':'/study-linux/docs/shell/type/zsh/','title':"Zsh",'content':"Zsh "});index.add({'id':18,'href':'/study-linux/docs/shell/type/dash/','title':"Dash",'content':"Dash Dash 与 Bash 的区别  定义函数  bash: function 在 bash 中为关键字\ndash: dash 中没有 function 这个关键字\n2.select var in list; do command; done\nbash: 支持\ndash: 不支持，替代方法：采用 while+read+case 来实现\necho {0..10}  bash: 支持 {n..m} 展开\ndash: 不支持，替代方法，采用 seq 外部命令\nhere string  bash: 支持 here string\ndash: 不支持，替代方法：可采用 here documents\n  \u0026amp;word 重定向标准输出和标准错误\n   bash: 当 word 为非数字时，\u0026gt;\u0026amp;word 变成重定向标准错误和标准输出到文件 word\ndash: \u0026gt;\u0026amp;word, word 不支持非数字，替代方法: \u0026gt;word 2\u0026gt;\u0026amp;1; 常见用法 \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\n数组  bash: 支持数组，bash4 支持关联数组\ndash: 不支持数组，替代方法，采用变量名 + 序号来实现类似的效果\n子字符串扩展  bash: 支持 ${parameter:offset:length},${parameter:offset}\ndash: 不支持， 替代方法：采用 expr 或 cut 外部命令代替\n大小写转换  bash: 支持 ${parameter^pattern},${parameter^^pattern},${parameter,pattern},${parameter,,pattern}\ndash: 不支持，替代方法：采用 tr/sed/awk 等外部命令转换\n进程替换 \u0026lt;(command), \u0026gt;(command)  bash: 支持进程替换\ndash: 不支持，替代方法，通过临时文件中转\n[string1 = string2] 和 [ string1 == string2 ]  bash: 支持两者\ndash: 只支持 =\n[[ 加强版 test  bash: 支持 [[]], 可实现正则匹配等强大功能\ndash: 不支持 [[]], 替代方法，采用外部命令\nfor (( expr1 ; expr2 ; expr3 )) ; do list ; done  bash: 支持 C 语言格式的 for 循环\ndash: 不支持该格式的 for, 替代方法，用 while+$((expression)) 实现\nlet 命令和 ((expression))  bash: 有内置命令 let, 也支持 ((expression)) 方式\ndash: 不支持，替代方法，采用 $((expression)) 或者外部命令做计算\n$((expression))  bash: 支持 id++,id–,++id,–id 这样到表达式\ndash: 不支持 ++,–, 替代方法:id+=1,id-=1, id=id+1,id=id-1\n为什么 Ubuntu 要将 sh 链接到 dash 因为 Ubuntu 不存在 sh。而系统很多脚本指定用 sh。 /bin/sh is meant for system scripts, which may or may not have come from older versions of Ubuntu and/or other systems.\n参考：https://askubuntu.com/questions/976485/what-is-the-point-of-sh-being-linked-to-dash\n"});index.add({'id':19,'href':'/study-linux/docs/shell/command/xargs/','title':"xargs",'content':"xargs xargs 命令的作用，是将标准输入转为命令行参数\n-L xargs -L 1 xargs --max-lines=1 # synonym for the -L option -L 参数指定多少行作为一个命令行参数。\n执行子目录里所有的 deploy.sh find . -name deploy.sh | xargs -L 1 sh\n-n -L 参数虽然解决了多行的问题，但是有时用户会在同一行输入多项。 -n 参数指定每次将多少项，作为命令行参数。\n参考  阮一峰 xargs 命令教程  "});index.add({'id':20,'href':'/study-linux/docs/basic/','title':"基础",'content':"Linux 基础 "});index.add({'id':21,'href':'/study-linux/docs/basic/user/','title':"用户",'content':"Linux 用户 创建用户 useradd  useradd xxx  不会创建同名目录   useradd -m xxx  会在 /home 目录创建同名文件夹   passwd xxx  adduser  删除用户 userdel xxx  用户组 添加组 groupadd xxx\n删除组 groupdel xxx\n 修改用户主目录 usermod -d /home/users/yewang -u uid yewang\n问题：usermod user is currently used by process\nuid 获取 id 用户名\n 修改默认用户目录与默认 shell chmod +w /etc/passwd vi /etc/passwd # id username # yewang:x:311272:100000:yewang:/home/user/yewang:/bin/zsh chmod -w /etc/passwd sudo 免密码   切换到 root 用户\n  添加 sudo 文件的写权限\n  # 添加 sudo 文件的写权限 chmod u+w /etc/sudoers vi /etc/sudoers 找到这行 root ALL=(ALL) ALL, 在他下面添加 xxx ALL=(ALL) ALL (这里的 xxx 是你的用户名)\nps: 这里说下你可以 sudoers 添加下面四行中任意一条\n# 允许用户 youuser 执行 sudo 命令 (需要输入密码). youuser ALL=(ALL) ALL # 允许用户组 youuser 里面的用户执行 sudo 命令 (需要输入密码). %youuser ALL=(ALL) ALL # 允许用户 youuser 执行 sudo 命令，并且在执行的时候不输入密码. youuser ALL=(ALL) NOPASSWD: ALL # 允许用户组 youuser 里面的用户执行 sudo 命令，并且在执行的时候不输入密码. %youuser ALL=(ALL) NOPASSWD: ALL 撤销 sudoers 文件写权限，命令:  chmod u-w /etc/sudoers "});index.add({'id':22,'href':'/study-linux/docs/shell/command/','title':"Linux 命令",'content':"Linux 命令 查看服务器信息 CPU # 物理 cpu 个数 cat /proc/cpuinfo| grep \u0026#39;physical id\u0026#39; | sort | uniq | wc -l # 每个物理 cpu 的核心数 cat /proc/cpuinfo| grep \u0026#39;core id\u0026#39; | sort | uniq | wc -l # 逻辑 cpu 个数（线程数） cat /proc/cpuinfo| grep \u0026#39;processor\u0026#39; | sort | uniq | wc -l # CPU 位数 getconf LONG_BIT # CPU 型号 dmidecode -s processor-version 系统版本 # 操作系统版本 cat /etc/issue cat /etc/*release # 系统内核 uname -a cat /proc/version Linux 内核版本 参考：\n The Linux Kernel Archives Linux 内核 Linux 内核开发指南  磁盘 # 目录空间大小排行 du -m --max-depth=2 | sort -rn | head -10 文件类型 文件类型分为 p、d、l、s、c、b 和 -：\n   表示普通文件   p 表示命名管道文件 d 表示目录文件 l 表示符号连接文件 s 表示 socket 文件 c 表示字符设备文件 b 表示块设备文件  带宽 ifconfig sudo ethtool 网卡名 | grep Speed  查看运行信息 lsof # 列出所有 tcp 网络连接信息 lsof -i tcp # 列出所有 udp 网络连接信息 lsof -i udp # 列出谁在使用某个端口 lsof -i :3306 # 列出谁在使用某个特定的 udp 端口 lsof -i udp:55 # 列出特定的 tcp 端口 lsof -i tcp:80 文件删除，但是磁盘没有释放 lsof | grep deleted 进程 # 查看文件被哪个进程占用 lsof /path/to/file # 怎么查看进程打开的文件 lsof -p pid lsof -c cmd  参考 Linux 工具快速教程 "});index.add({'id':23,'href':'/study-linux/docs/shell/','title':"Shell",'content':"Shell Shell 与 Linux 的关系 Shell 本质应该是 CLI，它是一个让用户通过命令行来实现和系统交互的接口。\n"});index.add({'id':24,'href':'/study-linux/docs/shell/program/','title':"Shell 编程",'content':"Shell 编程 "});index.add({'id':25,'href':'/study-linux/docs/distro/','title':"发行版",'content':"Linux 发行版 Debian Ubuntu  Fedora RHEL (Red Hat Enterprise Linux) CentOS  openSUSE  Arch Linux  Chrome OS "});index.add({'id':26,'href':'/study-linux/docs/shell/type/','title':"Shell 类型",'content':"Shell 类型 "});index.add({'id':27,'href':'/study-linux/docs/kernel/','title':"内核",'content':"内核 参考 现在的 Linux 内核和 Linux 2.6 的内核有多大区别？ "});index.add({'id':28,'href':'/study-linux/docs/shell/program/practice/','title':"实践",'content':"Shell 实践 "});index.add({'id':29,'href':'/study-linux/docs/basic/timezone/','title':"时区",'content':"时区 设置时区 CentOS 和 Ubuntu 的时区文件是 /etc/localtime，\n但是在 CentOS7 以后 localtime 变成了一个链接文件\n[root@centos7 ~]# ll /etc/localtime lrwxrwxrwx 1 root root 33 Oct 12 11:01 /etc/localtime -\u0026gt; /usr/share/zoneinfo/Asia/Shanghai  CentOS6、Ubuntu16 $ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime CentOS7、RHEL7、Scientific Linux 7、Oracle Linux 7 最好的方法是使用 timedatectl 命令\n$ timedatectl list-timezones |grep Shanghai #查找中国时区的完整名称 Asia/Shanghai $ timedatectl set-timezone Asia/Shanghai #其他时区以此类推 或者直接手动创建软链接\n$ ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  参考：\n Linux 修改时区的正确方法  "});index.add({'id':30,'href':'/study-linux/docs/shell/tutorial/','title':"教程",'content':"Shell 教程 基础 进阶 高阶 "});index.add({'id':31,'href':'/study-linux/docs/appendix/','title':"附录",'content':""});index.add({'id':32,'href':'/study-linux/docs/','title':"Docs",'content':""});})();